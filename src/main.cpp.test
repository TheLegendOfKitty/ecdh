#include <bits/types/time_t.h>
#include <ncurses.h>
#include <panel.h>
#include <string.h>
#include <time.h>

// Client buffer size
#define BUFFERSIZE 128

// Client options
#define INVALID -1
#define REGISTER 1
#define SETPASS 2
#define SETNAME 3
#define LOGIN 4
#define EXIT 5
#define INVITE 6
#define JOIN 7
#define GETUSERS 8
#define GETALLUSERS 9
#define GETUSER 10
#define LEAVE 11
#define GETMOTD 12
#define GETROOMS 13

struct Packet {
   time_t timestamp;
   char buf[BUFFERSIZE];
   char username[64];
   char realname[64];
   int options;
};
typedef struct Packet packet;

#define ESCAPE_RET 27
#define ENTER_RET 0

/* Read keyboard input into buffer */
int userInput(WINDOW* inputWin, packet* tx_pkt, int* ret) {
   int i = 0;
   int ch;
   wmove(inputWin, 0, 0);
   wrefresh(inputWin);
   // Read 1 char at a time
   while ((ch = getch()) != '\n') {
      // Backspace
      if (ch == 8 || ch == 127 || ch == KEY_LEFT) {
         if (i > 0) {
            wprintw(inputWin, "\b \b\0");
            tx_pkt->buf[--i] = '\0';
            wrefresh(inputWin);
         }
         else {
            wprintw(inputWin, "\b \0");
         }
      }
      else if (ch == KEY_RESIZE) {
        continue;
      }
      else if(ch == 27){
        *ret = ESCAPE_RET;
        return 0;
      }
      // Otherwise put in buffer
      else if (ch != ERR) {
         if (i < BUFFERSIZE - 1) {
            strcat(tx_pkt->buf, (char *)&ch);
            i++;
            wprintw(inputWin, (char *)&ch);
            wrefresh(inputWin);
         }
         // Unless buffer is full
         else {
            wprintw(inputWin, "\b%s", (char *)&ch);
            tx_pkt->buf[(i - 1)] = '\0';
            strcat(tx_pkt->buf, (char *)&ch);
            wrefresh(inputWin);
         }
      }
   }
   // Null terminate, clear input window
   tx_pkt->buf[i] = '\0';
   wclear(inputWin);
   wrefresh(inputWin);
   *ret = ENTER_RET;
   return i;
}

int main(){
  WINDOW *my_wins[4];
	PANEL  *my_panels[4];
	PANEL  *top;
	int ch;
  char str[80];
  int row,col;

	/* Initialize curses */
	initscr();
	start_color();
	cbreak();
	noecho();
	keypad(stdscr, TRUE);


  WINDOW* inputWinBox;

  inputWinBox = subwin(stdscr, (LINES * 0.2) - 1, COLS, (LINES * 0.8) + 1, 0);
  box(inputWinBox, 0, 0);
  WINDOW* inputWin = subwin(inputWinBox, (LINES * 0.2) - 3, COLS - 2, (LINES * 0.8) + 2, 1);

  packet tx_pkt;
  packet *tx_pkt_ptr = &tx_pkt;
  int bufSize;

  // Create window for chat box, draw said box
  WINDOW* chatWinBox = subwin(stdscr, (LINES * 0.8), COLS, 0, 0);
   box(chatWinBox, 0, 0);
   // Draw a slick title on it
   mvwaddch(chatWinBox, 0, (COLS * 0.5) - 6, ACS_RTEE);
   wattron(chatWinBox, COLOR_PAIR(3));
   mvwaddstr(chatWinBox, 0, (COLS * 0.5) - 5, " Messages " );
   wattroff(chatWinBox, COLOR_PAIR(3));
   mvwaddch(chatWinBox, 0, (COLS * 0.5) + 4, ACS_LTEE );
   wrefresh(chatWinBox);
   // Create sub window in box to hold text
  WINDOW* chatWin = subwin(chatWinBox, (LINES * 0.8 - 2), COLS - 2, 1, 1);
   // Enable text scrolling
   scrollok(chatWin, TRUE);
   doupdate();
  

  while(true){
    
    wcursyncup(inputWin);
    wrefresh(inputWin);
    refresh();
    // Wipe packet space
    memset(&tx_pkt, 0, sizeof(packet));
    // Set packet options as untouched
    tx_pkt.options = INVALID;
    // Read user kb input, return number of chars
    int ret;
    bufSize = userInput(inputWin, tx_pkt_ptr, &ret);
    if(ret == ESCAPE_RET){
      mvprintw(LINES - 2, 0, "ESCAPE HIT!");
      continue;
    }
    wprintw(chatWin, "%s\n", tx_pkt.buf);
    wrefresh(chatWin);
    //wprintw(chatWinBox, "%s", tx_pkt.buf);
    // Set default send flag to True
    //send_flag = 1;

     /*switch(ch){
	      case 9:
          mvprintw(10, 0, "%s", tx_pkt.buf);	   
     }*/
     //mvprintw(LINES - 2, 0, "%s", tx_pkt.buf);
    //mvprintw(LINES - 2, 0, "%d", ch);
		update_panels();
    
		doupdate();
  }
  endwin();
  return 0;

}